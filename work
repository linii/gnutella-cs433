Configuration
    Config file parsing (group membership -- what peers each peer has as its neighbors)
        List of IP addresses + peer ID's
    Command line parsing (config file,
    Debugging interface (copied from previous assignments)
    Testing:
        Varying topologies
        Text files of various sizes
        Printing of actions (on query, on hitquery, on file request, etc)

Documentation
    Design
    Description of peer vm's
    Test cases and what commands to run
    Performance results

-----------------

Classes
    Query message  (message ID, TTL, file name)
    Hitquery message  (message ID, TTL, file name, peer IP, port number)
    Peer
    GnutellaPacket (multiplexing and demultiplexing for query/hitquery messages)


Peer state
    int peer ID
    DATA STRUCTURE Message IDs + upstream peers
        [message ID, upstream peer ID]
        flushing policy
    DATA STRUCTURE local storage
        can be just files stored on machine
    IMMUTABLE DATA STRUCTURE list of neighbors

Query handling
    checking that the message hasn't already been seen
    updating the associative array
    searching local storage
        if file found, sends hitquery message upstream (using hitquery handling function)
    decrement TTL, (increment hops field)
    if TTL is not 0 & not seen already, forwarding to neighbors using TCP socket connection

Hitquery handling
    searching the associative array
    sends hitquery message upstream

File request handling
    specify the port - 7777?
    listen for connections at that port
    HTTP protocol - file index, file size, file name

Multithreading
    upon reception of TCP connection request, accepting TCP connections from upstream for files peer has
    upon reception of hitquery message, propagating responses back to original sender
    upon reception of query message, sending to neighbors as described above

-----------------

Extensions

Push

